(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[509],{3157:(e,n,t)=>{Promise.resolve().then(t.bind(t,8578))},8578:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>d});var r=t(2860),s=t(4836),i=t(2662),a=t(1084),o=t(4612),l=t.n(o);function d(){return(0,r.jsxs)("main",{className:"flex min-h-screen flex-col items-center p-8 sm:p-24",children:[(0,r.jsx)("h1",{className:"text-4xl font-bold mb-6 text-center",children:"Ground Truth Tensor Generation"}),(0,r.jsx)("div",{className:"w-full max-w-4xl mb-8",children:(0,r.jsxs)(i.Zp,{className:"p-6",children:[(0,r.jsxs)("div",{className:"flex flex-col md:flex-row items-center mb-6",children:[(0,r.jsx)("div",{className:"md:w-1/2 p-4",children:(0,r.jsx)(a.default,{src:"/images/cats_res.png",alt:"Ground Truth Tensor Generation",width:400,height:300,className:"rounded-md"})}),(0,r.jsxs)("div",{className:"md:w-1/2 p-4",children:[(0,r.jsx)("h2",{className:"text-2xl font-semibold mb-3",children:"Objective"}),(0,r.jsx)("p",{className:"mb-4",children:"Generate patch-level ground truth tensors from annotated images to simulate the output of a simple RPN."}),(0,r.jsx)("h2",{className:"text-2xl font-semibold mb-3",children:"Setup"}),(0,r.jsxs)("ul",{className:"list-disc pl-5 mb-4",children:[(0,r.jsx)("li",{children:"Resize input images to 200x200"}),(0,r.jsx)("li",{children:"Divide each resized image into a 40\xd740 grid of 5\xd75 patches"})]})]})]}),(0,r.jsx)("h2",{className:"text-2xl font-semibold mb-3",children:"Implementation Details"}),(0,r.jsx)("div",{className:"bg-gray-100 dark:bg-gray-800 p-4 rounded-md mb-6 overflow-auto",children:(0,r.jsx)("pre",{className:"text-sm",children:'def resize_image_and_boxes(image_path, boxes):\n    """\n    Resizes the input image to TARGET_SIZE x TARGET_SIZE and scales bounding boxes\n    already defined in the bottom-left origin (x=col, y=row from bottom).\n    """\n    image = Image.open(image_path).convert("RGB")\n    original_width, original_height = image.size\n    \n    # Resize the image to TARGET_SIZE x TARGET_SIZE\n    image = image.resize((TARGET_SIZE, TARGET_SIZE))\n    \n    # Scale the bounding boxes\n    resized_boxes = []\n    for box in boxes:\n        x_center, y_center, width, height = box\n        \n        # Scale the coordinates and dimensions\n        new_x_center = x_center * TARGET_SIZE / original_width\n        new_y_center = y_center * TARGET_SIZE / original_height\n        new_width = width * TARGET_SIZE / original_width\n        new_height = height * TARGET_SIZE / original_height\n        \n        resized_boxes.append([new_x_center, new_y_center, new_width, new_height])\n    \n    return image, resized_boxes'})}),(0,r.jsx)("div",{className:"bg-gray-100 dark:bg-gray-800 p-4 rounded-md mb-6 overflow-auto",children:(0,r.jsx)("pre",{className:"text-sm",children:'def generate_gt_tensors(boxes):\n    """\n    Generates ground-truth existence and location tensors for a resized image.\n    """\n    # Initialize the existence tensor with shape (grid_height, grid_width, 2)\n    # It will hold one-hot encoded values: [1, 0] for object, [0, 1] for background\n    existence = np.zeros((GRID_NUMBER, GRID_NUMBER, 2))\n    \n    # Initialize the location tensor to store box details for positive patches\n    location = np.zeros((GRID_NUMBER, GRID_NUMBER, 4))\n    \n    # Generate the patch grid using bottom-left (0, 0) origin\n    grid = compute_patch_grid()\n    \n    # Set all patches to background by default\n    existence[:, :, 1] = 1\n    \n    # For each patch in the grid\n    for i, j, patch_x_center, patch_y_center, patch_w, patch_h in grid:\n        # Create a patch box in [x_center, y_center, width, height] format\n        patch_box = [patch_x_center, patch_y_center, PATCH_SIZE, PATCH_SIZE]\n        \n        # Find all overlapping ground truth boxes\n        overlapping_boxes = []\n        for box in boxes:\n            if boxes_overlap(patch_box, box):\n                overlapping_boxes.append(box)\n        \n        # If there are overlapping boxes\n        if overlapping_boxes:\n            # Mark this patch as containing an object\n            existence[j, i, 0] = 1\n            existence[j, i, 1] = 0\n            \n            # Randomly pick one of the overlapping boxes\n            import random\n            selected_box = random.choice(overlapping_boxes)\n            \n            # Store the selected box\'s coordinates in the location tensor\n            location[j, i] = selected_box\n    \n    return existence, location'})}),(0,r.jsx)("h2",{className:"text-2xl font-semibold mb-3",children:"Process"}),(0,r.jsxs)("ol",{className:"list-decimal pl-5 mb-6",children:[(0,r.jsx)("li",{className:"mb-2",children:"Resize the image and its bounding boxes to 200x200"}),(0,r.jsxs)("li",{className:"mb-2",children:["For each patch:",(0,r.jsxs)("ul",{className:"list-disc pl-5 mt-1",children:[(0,r.jsxs)("li",{children:["If any GT box overlaps the patch:",(0,r.jsxs)("ul",{className:"list-disc pl-5 mt-1",children:[(0,r.jsx)("li",{children:"Mark Existence[row, col] = [1, 0]"}),(0,r.jsx)("li",{children:"Randomly pick one overlapping box and write [x_center, y_center, width, height] into the Location tensor"})]})]}),(0,r.jsx)("li",{children:"Otherwise, mark Existence[row, col] = [0, 1]"})]})]})]}),(0,r.jsx)("h2",{className:"text-2xl font-semibold mb-3",children:"Output"}),(0,r.jsxs)("ul",{className:"list-disc pl-5 mb-6",children:[(0,r.jsx)("li",{children:"Existence tensor: (GRID_NUMBER, GRID_NUMBER, 2)"}),(0,r.jsx)("li",{children:"Location tensor: (GRID_NUMBER, GRID_NUMBER, 4)"})]}),(0,r.jsxs)("div",{className:"flex justify-between",children:[(0,r.jsx)(l(),{href:"/",children:(0,r.jsx)(s.$,{variant:"outline",children:"Back to Home"})}),(0,r.jsx)(l(),{href:"/tensor-decoding",children:(0,r.jsx)(s.$,{children:"Next: Tensor Decoding"})})]})]})})]})}},4836:(e,n,t)=>{"use strict";t.d(n,{$:()=>d});var r=t(2860),s=t(3200),i=t(4933),a=t(1073),o=t(2979);let l=(0,a.F)("inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",{variants:{variant:{default:"bg-primary text-primary-foreground shadow hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",outline:"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-9 px-4 py-2",sm:"h-8 rounded-md px-3 text-xs",lg:"h-10 rounded-md px-8",icon:"h-9 w-9"}},defaultVariants:{variant:"default",size:"default"}}),d=s.forwardRef((e,n)=>{let{className:t,variant:s,size:a,asChild:d=!1,...c}=e,h=d?i.DX:"button";return(0,r.jsx)(h,{className:(0,o.cn)(l({variant:s,size:a,className:t})),ref:n,...c})});d.displayName="Button"},2662:(e,n,t)=>{"use strict";t.d(n,{Zp:()=>a});var r=t(2860),s=t(3200),i=t(2979);let a=s.forwardRef((e,n)=>{let{className:t,...s}=e;return(0,r.jsx)("div",{ref:n,className:(0,i.cn)("rounded-xl border bg-card text-card-foreground shadow",t),...s})});a.displayName="Card",s.forwardRef((e,n)=>{let{className:t,...s}=e;return(0,r.jsx)("div",{ref:n,className:(0,i.cn)("flex flex-col space-y-1.5 p-6",t),...s})}).displayName="CardHeader",s.forwardRef((e,n)=>{let{className:t,...s}=e;return(0,r.jsx)("div",{ref:n,className:(0,i.cn)("font-semibold leading-none tracking-tight",t),...s})}).displayName="CardTitle",s.forwardRef((e,n)=>{let{className:t,...s}=e;return(0,r.jsx)("div",{ref:n,className:(0,i.cn)("text-sm text-muted-foreground",t),...s})}).displayName="CardDescription",s.forwardRef((e,n)=>{let{className:t,...s}=e;return(0,r.jsx)("div",{ref:n,className:(0,i.cn)("p-6 pt-0",t),...s})}).displayName="CardContent",s.forwardRef((e,n)=>{let{className:t,...s}=e;return(0,r.jsx)("div",{ref:n,className:(0,i.cn)("flex items-center p-6 pt-0",t),...s})}).displayName="CardFooter"},2979:(e,n,t)=>{"use strict";t.d(n,{cn:()=>i});var r=t(9769),s=t(2460);function i(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];return(0,s.QP)((0,r.$)(n))}}},e=>{var n=n=>e(e.s=n);e.O(0,[395,84,685,411,358],()=>n(3157)),_N_E=e.O()}]);